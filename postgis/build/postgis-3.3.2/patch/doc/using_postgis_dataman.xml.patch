diff --git a/doc/using_postgis_dataman.xml b/doc/using_postgis_dataman.xml
index eee8ce0e0..f3dcafcb8 100644
--- a/doc/using_postgis_dataman.xml
+++ b/doc/using_postgis_dataman.xml
@@ -466,7 +466,7 @@ The GEOMETRY type calculates a meaningless cartesian distance between Reykjavik
 						and tests (distance, containment) have to traverse the vertex list at least once and sometimes N times
 						(with N being the number of vertices in the other candidate feature).
 					</para>
-					<para>As with GEOMETRY, we recommend that when you have very large polygons, but are doing queries in small areas, you "denormalize" your geometric data into smaller chunks so that the index can effectively subquery parts of the object and so queries don't have to pull out the whole object every time. Please consult <xref linkend="ST_Subdivide" /> function documentation.
+					<para>As with GEOMETRY, we recommend that when you have very large polygons, but are doing queries in small areas, you "denormalize" your geometric data into smaller chunks so that the index can effectively subquery parts of the object and so queries don't have to pull out the whole object every time.
 					Just because you *can* store all of Europe in one polygon doesn't mean you *should*.</para>
 				  </answer>
 				</qandaentry>
@@ -2171,33 +2171,33 @@ WHERE
 	 	<title>SP-GiST Indexes</title>
 
 		<para>SP-GiST stands for "Space-Partitioned Generalized Search Tree" and is
-		a generic form of indexing that supports partitioned search trees, such as 
+		a generic form of indexing that supports partitioned search trees, such as
 		quad-trees, k-d trees, and radix trees (tries). The common feature of these
-		data structures is that they repeatedly divide the search space into 
-		partitions that need not be of equal size. In addition to GIS indexing, 
-		SP-GiST is used to speed up searches on many kinds of data, such as phone 
+		data structures is that they repeatedly divide the search space into
+		partitions that need not be of equal size. In addition to GIS indexing,
+		SP-GiST is used to speed up searches on many kinds of data, such as phone
 		routing, ip routing, substring search, etc. </para>
 
     <para>As it is the case for GiST indexes, SP-GiST indexes are lossy, in the
-		sense that they store the bounding box englobing the spatial objects. 
-		SP-GiST indexes can be considered as an alternative to GiST indexes. The 
-		performance tests reveal that SP-GiST indexes are especially beneficial 
-		when there are many overlapping objects, that is, with so-called 
+		sense that they store the bounding box englobing the spatial objects.
+		SP-GiST indexes can be considered as an alternative to GiST indexes. The
+		performance tests reveal that SP-GiST indexes are especially beneficial
+		when there are many overlapping objects, that is, with so-called
 		“spaghetti data”.</para>
 
-		<para>Once a GIS data table exceeds a few thousand rows, an SP-GiST index 
-		may be used to speed up spatial searches of the data. The syntax for 
+		<para>Once a GIS data table exceeds a few thousand rows, an SP-GiST index
+		may be used to speed up spatial searches of the data. The syntax for
 		building an SP-GiST index on a "geometry" column is as follows:</para>
 
 		<para><programlisting>CREATE INDEX [indexname] ON [tablename] USING SPGIST ( [geometryfield] ); </programlisting></para>
 
-		<para>The above syntax will build a 2-dimensional index. A 3-dimensional 
+		<para>The above syntax will build a 2-dimensional index. A 3-dimensional
 		index for the geometry type can be created using the 3D operator class:</para>
 
 		<para><programlisting>CREATE INDEX [indexname] ON [tablename] USING SPGIST ([geometryfield] spgist_geometry_ops_3d);</programlisting></para>
 
-		<para>Building a spatial index is a computationally intensive operation. 
-		It also blocks write access to your table for the time it creates, so on a 
+		<para>Building a spatial index is a computationally intensive operation.
+		It also blocks write access to your table for the time it creates, so on a
 		production system you may want to do in in a slower CONCURRENTLY-aware way:</para>
 
 	  <para><programlisting>CREATE INDEX CONCURRENTLY [indexname] ON [tablename] USING SPGIST ( [geometryfield] ); </programlisting></para>
