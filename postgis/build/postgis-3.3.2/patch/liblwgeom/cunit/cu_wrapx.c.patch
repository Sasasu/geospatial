diff --git a/liblwgeom/cunit/cu_wrapx.c b/liblwgeom/cunit/cu_wrapx.c
index 9f246f353..e06ac24af 100644
--- a/liblwgeom/cunit/cu_wrapx.c
+++ b/liblwgeom/cunit/cu_wrapx.c
@@ -4,6 +4,7 @@
  * http://postgis.net
  *
  * Copyright (C) 2016 Sandro Santilli <strk@kbt.io>
+ * Modifications Copyright (c) 2017 - Present Pivotal Software, Inc. All Rights Reserved.
  *
  * This is free software; you can redistribute and/or modify it under
  * the terms of the GNU General Public Licence. See the COPYING file.
@@ -18,8 +19,8 @@
 
 static void test_lwgeom_wrapx(void)
 {
-	LWGEOM *geom, *ret;
-	char *exp_wkt, *obt_wkt;
+    LWGEOM *geom, *ret, *tmp, *tmp2;
+    char *exp_wkt, *obt_wkt;
 
 	geom = lwgeom_from_wkt(
 		"POLYGON EMPTY",
@@ -77,12 +78,21 @@ static void test_lwgeom_wrapx(void)
 		"LINESTRING(0 0,10 0)",
 		LW_PARSER_CHECK_NONE);
 	CU_ASSERT_FATAL(geom != NULL);
-	ret = lwgeom_wrapx(geom, 8, -10);
+	tmp = lwgeom_wrapx(geom, 8, -10);
+	ret = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
 	CU_ASSERT_FATAL(ret != NULL);
 	obt_wkt = lwgeom_to_ewkt(ret);
-	exp_wkt = "MULTILINESTRING((0 0,8 0),(-2 0,0 0))";
+	tmp = lwgeom_from_wkt(
+	        "MULTILINESTRING((0 0,8 0),(-2 0,0 0))",
+	        LW_PARSER_CHECK_NONE);
+	tmp2 = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
+	exp_wkt = lwgeom_to_ewkt(tmp2);
+	lwgeom_free(tmp2);
 	ASSERT_STRING_EQUAL(obt_wkt, exp_wkt);
 	lwfree(obt_wkt);
+	lwfree(exp_wkt);
 	lwgeom_free(ret);
 	lwgeom_free(geom);
 
@@ -90,12 +100,19 @@ static void test_lwgeom_wrapx(void)
 		"MULTILINESTRING((-5 -2,0 0),(0 0,10 10))",
 		LW_PARSER_CHECK_NONE);
 	CU_ASSERT_FATAL(geom != NULL);
-	ret = lwgeom_wrapx(geom, 0, 20);
+	tmp = lwgeom_wrapx(geom, 0, 20);
+	ret = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
 	CU_ASSERT_FATAL(ret != NULL);
 	obt_wkt = lwgeom_to_ewkt(ret);
-	exp_wkt = "MULTILINESTRING((15 -2,20 0),(0 0,10 10))";
+	tmp = lwgeom_from_wkt("MULTILINESTRING((15 -2,20 0),(0 0,10 10))", LW_PARSER_CHECK_NONE);
+	tmp2 = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
+	exp_wkt = lwgeom_to_ewkt(tmp2);
+	lwgeom_free(tmp2);
 	ASSERT_STRING_EQUAL(obt_wkt, exp_wkt);
 	lwfree(obt_wkt);
+	lwfree(exp_wkt);
 	lwgeom_free(ret);
 	lwgeom_free(geom);
 
@@ -106,21 +123,29 @@ static void test_lwgeom_wrapx(void)
 		")",
 		LW_PARSER_CHECK_NONE);
 	CU_ASSERT_FATAL(geom != NULL);
-	ret = lwgeom_wrapx(geom, 2, 20);
+	tmp = lwgeom_wrapx(geom, 2, 20);
+	ret = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
 	CU_ASSERT_FATAL(ret != NULL);
 	obt_wkt = lwgeom_to_ewkt(ret);
-	exp_wkt = "GEOMETRYCOLLECTION("
-						"MULTIPOLYGON("
-						"((22 0,20 0,20 10,22 10,22 4,22 2,22 0)),"
-						"((2 10,10 10,10 0,2 0,2 2,4 2,4 4,2 4,2 10))"
-						"),"
-						"MULTIPOLYGON("
-						"((22 11,20 11,20 21,22 21,22 15,22 13,22 11)),"
-						"((2 21,10 21,10 11,2 11,2 13,4 13,4 15,2 15,2 21))"
-						")"
-						")";
+	tmp = lwgeom_from_wkt("GEOMETRYCOLLECTION("
+                          "MULTIPOLYGON("
+                          "((22 0,20 0,20 10,22 10,22 4,22 2,22 0)),"
+                          "((2 10,10 10,10 0,2 0,2 2,4 2,4 4,2 4,2 10))"
+                          "),"
+                          "MULTIPOLYGON("
+                          "((22 11,20 11,20 21,22 21,22 15,22 13,22 11)),"
+                          "((2 21,10 21,10 11,2 11,2 13,4 13,4 15,2 15,2 21))"
+                          ")"
+                          ")",
+                          LW_PARSER_CHECK_NONE);
+	tmp2 = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
+	exp_wkt = lwgeom_to_ewkt(tmp2);
+	lwgeom_free(tmp2);
 	ASSERT_STRING_EQUAL(obt_wkt, exp_wkt);
 	lwfree(obt_wkt);
+	lwfree(exp_wkt);
 	lwgeom_free(ret);
 	lwgeom_free(geom);
 
@@ -132,21 +157,36 @@ static void test_lwgeom_wrapx(void)
 		")",
 		LW_PARSER_CHECK_NONE);
 	CU_ASSERT_FATAL(geom != NULL);
-	ret = lwgeom_wrapx(geom, 0, 20);
+	tmp = lwgeom_wrapx(geom, 0, 20);
+	ret = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
 	CU_ASSERT_FATAL(ret != NULL);
 	obt_wkt = lwgeom_to_ewkt(ret);
-	exp_wkt = "GEOMETRYCOLLECTION("
-						"MULTILINESTRING((15 -2,20 0),(0 0,10 10)),"
-						"POINT(15 0),"
-						"POLYGON EMPTY"
-						")";
+	tmp = lwgeom_from_wkt(
+	        "GEOMETRYCOLLECTION("
+            "MULTILINESTRING((15 -2,20 0),(0 0,10 10)),"
+            "POINT(15 0),"
+            "POLYGON EMPTY"
+            ")",
+            LW_PARSER_CHECK_NONE);
+	tmp2 = lwgeom_normalize(tmp);
+	lwgeom_free(tmp);
+	exp_wkt = lwgeom_to_ewkt(tmp2);
+	lwgeom_free(tmp2);
 	ASSERT_STRING_EQUAL(obt_wkt, exp_wkt);
 	lwfree(obt_wkt);
+	lwfree(exp_wkt);
 	lwgeom_free(ret);
 	lwgeom_free(geom);
 
 }
 
+static int
+clean_geos_wrapx_suite(void)
+{
+    finishGEOS();
+    return 0;
+}
 
 /*
 ** Used by test harness to register the tests in this file.
@@ -154,6 +194,6 @@ static void test_lwgeom_wrapx(void)
 void wrapx_suite_setup(void);
 void wrapx_suite_setup(void)
 {
-	CU_pSuite suite = CU_add_suite("wrapx", NULL, NULL);
-	PG_ADD_TEST(suite, test_lwgeom_wrapx);
+    CU_pSuite suite = CU_add_suite("wrapx", NULL, clean_geos_wrapx_suite);
+    PG_ADD_TEST(suite, test_lwgeom_wrapx);
 }
