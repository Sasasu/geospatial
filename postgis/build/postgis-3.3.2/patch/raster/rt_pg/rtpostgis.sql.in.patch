diff --git a/raster/rt_pg/rtpostgis.sql.in b/raster/rt_pg/rtpostgis.sql.in
index 0e17abcd7..8d1993d9d 100644
--- a/raster/rt_pg/rtpostgis.sql.in
+++ b/raster/rt_pg/rtpostgis.sql.in
@@ -13,6 +13,7 @@
 -- Copyright (c) 2011-2013 Regents of the University of California
 --   <bkpark@ucdavis.edu>
 -- Copyright (c) 2013-2017 Bborie Park <dustymugs@gmail.com>
+-- Modifications Copyright (c) 2017 - Present Pivotal Software, Inc. All Rights Reserved.
 --
 -- This program is free software; you can redistribute it and/or
 -- modify it under the terms of the GNU General Public License
@@ -93,12 +94,24 @@ CREATE OR REPLACE FUNCTION raster_out(raster)
     AS 'MODULE_PATHNAME','RASTER_out'
     LANGUAGE 'c' IMMUTABLE STRICT _PARALLEL;
 
+CREATE OR REPLACE FUNCTION raster_recv(internal)
+    RETURNS raster
+    AS 'MODULE_PATHNAME','RASTER_recv'
+    LANGUAGE 'c' IMMUTABLE STRICT;
+
+CREATE OR REPLACE FUNCTION raster_send(raster)
+    RETURNS bytea
+    AS 'MODULE_PATHNAME','RASTER_send'
+    LANGUAGE 'c' IMMUTABLE STRICT;
+
 -- Availability: 2.0.0
 CREATE TYPE raster (
     alignment = double,
     internallength = variable,
     input = raster_in,
     output = raster_out,
+    send = raster_send,
+    receive = raster_recv,
     storage = extended
 );
 
@@ -292,7 +305,7 @@ CREATE OR REPLACE FUNCTION st_summary(rast raster)
 		ELSE
 			msg := msg || 'bands ';
 		END IF;
-		msg := msg || 'and extent of ' || extent;
+		msg := msg || 'and extent of ' || extent::text;
 
 		IF
 			round(metadata.skewx::numeric, 10) <> round(0::numeric, 10) OR
@@ -7839,9 +7852,9 @@ CREATE OR REPLACE FUNCTION _raster_constraint_info_pixel_types(rastschema name,
 	RETURNS text[] AS $$
 	SELECT
 		trim(
-			both '''' from split_part(
+			both ' ''' from split_part(
 				regexp_replace(
-					split_part(s.consrc, ' = ', 2),
+					split_part(s.consrc, '=', 2),
 					'[\(\)]', '', 'g'
 				),
 				'::', 1
@@ -7925,10 +7938,10 @@ CREATE OR REPLACE FUNCTION _drop_raster_constraint_pixel_types(rastschema name,
 CREATE OR REPLACE FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name)
 	RETURNS double precision[] AS $$
 	SELECT
-		trim(both '''' from
+		trim(both ' ''' from
 			split_part(
 				regexp_replace(
-					split_part(s.consrc, ' = ', 2),
+					split_part(s.consrc, '=', 2),
 					'[\(\)]', '', 'g'
 				),
 				'::', 1
@@ -8017,11 +8030,14 @@ CREATE OR REPLACE FUNCTION _drop_raster_constraint_nodata_values(rastschema name
 
 CREATE OR REPLACE FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name)
 	RETURNS boolean[] AS $$
+--
+-- Greenplum will replace operator '=' as 'OPERATOR(pg_catalog.=)', hence original method will fail.
+--
 	SELECT
 		trim(
-			both '''' from split_part(
+			both ' ''' from split_part(
 				regexp_replace(
-					split_part(s.consrc, ' = ', 2),
+					split_part(s.consrc, '=', 2),
 					'[\(\)]', '', 'g'
 				),
 				'::', 1
@@ -8223,12 +8239,10 @@ CREATE OR REPLACE FUNCTION AddRasterConstraints (
 						RAISE NOTICE 'Adding alignment constraint';
 						rtn :=  @extschema@._add_raster_constraint_alignment(schema, $2, $3);
 					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
-						RAISE NOTICE 'Adding coverage tile constraint required for regular blocking';
-						rtn :=  @extschema@._add_raster_constraint_coverage_tile(schema, $2, $3);
-						IF rtn IS NOT FALSE THEN
-							RAISE NOTICE 'Adding spatially unique constraint required for regular blocking';
-							rtn :=  @extschema@._add_raster_constraint_spatially_unique(schema, $2, $3);
-						END IF;
+                        -- Greenplum doesn't support EXCLUSION CONSTRAINT (exclude)
+                        --  so spatially unique is not supportted up to now, 28 Jan 2015
+                        RAISE EXCEPTION 'Unable to add constraint: %, because Greenplum does not support exclusion constraint (EXCLUDE), so spatially unique constraints will be ignored. Skipping', quote_literal(constraints[x]);
+                        rtn := FLASE;
 					WHEN kw IN ('num_bands', 'numbands') THEN
 						RAISE NOTICE 'Adding number of bands constraint';
 						rtn :=  @extschema@._add_raster_constraint_num_bands(schema, $2, $3);
@@ -8663,6 +8677,32 @@ CREATE OR REPLACE FUNCTION _overview_constraint(ov raster, factor integer, refsc
 	LANGUAGE 'sql' STABLE
 	COST 100;
 
+-- We re-write this function, otherwise Greenplum will complain:
+--      function cannot execute on segment because it accesses relation "public.raster_columns"
+CREATE OR REPLACE FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name)
+    RETURNS boolean AS
+    $$
+    SELECT COALESCE((
+    SELECT TRUE
+    FROM
+        pg_class c,
+        pg_attribute a,
+        pg_type t,
+        pg_namespace n
+    WHERE t.typname = 'raster'::name
+        AND n.nspname = $3
+        AND c.relname = $4
+        AND a.attname = $5
+        AND a.attisdropped = false
+        AND a.atttypid = t.oid
+        AND a.attrelid = c.oid
+        AND c.relnamespace = n.oid
+        AND c.relkind = ANY(ARRAY['r'::char, 'v'::char, 'm'::char, 'f'::char])
+        AND NOT pg_is_other_temp_schema(c.relnamespace)
+    ), FALSE)
+    $$ LANGUAGE 'sql' STABLE
+    COST 100;
+
 CREATE OR REPLACE FUNCTION _overview_constraint_info(
 	ovschema name, ovtable name, ovcolumn name,
 	OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer
